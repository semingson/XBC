@model XBC.ViewModel.BatchViewModel

@*<link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-3.1.1.min.js"></script>
    <script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>

    <link href="~/Content/jquery-ui-timepicker-addon.min.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-ui-timepicker-addon.min.js"></script>*@



@using (Html.BeginForm("Edit", "Batch", FormMethod.Post, new { id = "form-edit", name = "form-edit" }))
{
    <style>
        .form-control {
            width: 400px !important;
            margin-left: 100px;
        }

        .form-horizontal {
            width: 500px !important;
        }
    </style>

    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.id)

        <div class="form-group">
            @*@Html.LabelFor(model => model.technologyId, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.technologyId, (IEnumerable<SelectListItem>)
                ViewBag.TechnologyList, "Technology", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.technologyId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @*@Html.LabelFor(model => model.trainerId, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.trainerId, (IEnumerable<SelectListItem>)
                ViewBag.TrainerList, "Trainer", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.trainerId, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.technologyName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.technologyName, new { htmlAttributes = new { @class = "form-control",placeholder = "Name" } })
                    @Html.ValidationMessageFor(model => model.technologyName, "", new { @class = "text-danger" })
                </div>
            </div>*@

        @*<div class="form-group">
                @Html.LabelFor(model => model.trainerName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.trainerName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.trainerName, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group">
            @*@Html.LabelFor(model => model.name, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control", placeholder = "Name" } })
                @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @*@Html.LabelFor(model => model.periodFrom, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.periodFrom, new { htmlAttributes = new { @type = "date", @class = "form-control", @Value = Model.periodFrom, onkeydown = "return false", onpaste = "return false", placeholder = "Period From" } })*@
                @Html.EditorFor(model => model.periodFrom, new { htmlAttributes = new { @class = "form-control datepicker", onkeydown = "return false", onpaste = "return false", placeholder = "Period From" } })
                @Html.ValidationMessageFor(model => model.periodFrom, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @*@Html.LabelFor(model => model.periodTo, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                @Html.EditorFor(model => model.periodTo, new { htmlAttributes = new { @class = "form-control datepicker", onkeydown = "return false", onpaste = "return false", placeholder = "Period To" } })
                @*@Html.EditorFor(model => model.periodTo, new { htmlAttributes = new { @class = "form-control date-picker", onkeydown = "return false", onpaste = "return false", placeholder = "Period To" } })*@
                @Html.ValidationMessageFor(model => model.periodTo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @*@Html.LabelFor(model => model.roomId, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.roomId, (IEnumerable<SelectListItem>)
                ViewBag.RoomList, "Room", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.roomId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @*@Html.LabelFor(model => model.bootcampTypeId, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.bootcampTypeId, (IEnumerable<SelectListItem>)
                ViewBag.BTList, "Bootcamp Type", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.bootcampTypeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" >
            @*@Html.LabelFor(model => model.notes, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10" style="float: right">
                @*@Html.EditorFor(model => model.notes, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.TextArea("Notes", new { htmlAttributes = new { @class = "form-control", placeholder = "Notes" } })
                @Html.ValidationMessageFor(model => model.notes, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <div class="btn-group btn-group-sm" style="float: right">
                    <input type="button" value="Cancel" class="btn btn-danger" data-dismiss="modal" />
                    <input type="submit" value="Save Change" class="btn btn-warning" />
                </div>
            </div>
        </div>
    </div>
}

@Scripts.Render("~/bundles/jqueryval")

<script type="text/javascript">
    $(".datepicker").datepicker({ format: "dd-M-yyyy" });

    $("#form-edit").submit(function () {
        $.ajax({
            url: this.action,
            type: this.method,
            data: $(this).serialize(),
            success: function (result) {
                if (result.success) {
                    alert("Edit SuccsessFull ! Name : " + result.entity.name);
                    $(".modal").modal("hide");
                    GetList();
                }
                else {
                    alert("Error ! " + result.message);
                }
            }
        });
        return false;
    });

    //$(document).ready(function () {
    //    $(function () {
    //        $(".datepicker").datetimepicker({
    //            changeMonth: true,
    //            changeYear: true,
    //            yearRange: "-100:+0",
    //            dateFormat: 'dd-M-yy',
    //            controlType: 'select',
    //            timeFormat: 'hh:mm TT'
    //        });

    //    });

    //    //jQuery.validator.methods.date = function (value, element) {
    //    //    var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
    //    //    if (isChrome) {
    //    //        var d = new Date();
    //    //        return this.optional(element) || !/Invalid|NaN/.test(new Date(d.toLocaleDateString(value)));
    //    //    } else {
    //    //        return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
    //    //    }
    //    //};

    //});
</script>
